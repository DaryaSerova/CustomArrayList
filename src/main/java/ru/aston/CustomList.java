package ru.aston;

/**
 * Упорядоченная коллекция. Дает возможность контролировать куда в списке вставляется каждый элемент.<p>
 * Позволяет обращаться к элементам по их целочисленному индексу (позиции в списке) и
 * выполнять поиск элементов в списке.
 * Допускает добавлять, вставлять дублирующиеся элементы.
 *
 * @param <E> тип элементов в листе.
 *
 @author Серова Дарья
 @see CustomArrayList
 @version 1.0
 @since 2023-08-15
 */

public interface CustomList<E> {

    /**
     * Добавляет указанный элемент в конец списка.
     * В зависимости от типа элемента хранимого в списке, возможно ограничения на добавление элемента в список.
     * Классы, реализующие интерфейс {@code CustomList} должны указывать в своей документации типы и ограничения.
     * @param e элемент, который нужно добавить в список.
     * @return {@code true} - элемент успешно добавлен.
     * @throws IndexOutOfBoundsException если позиция вне диапазона {@code (index < 0 || index > size)}.
     */
    boolean add(E e);

    /**
     * Вставляет передаваемый элемент в список в указанную позицию.
     * Сдвигает элемент, находящийся в данный момент в этой позиции (если таковой имеется), и все последующие элементы
     * вправо (добавляет единицу к их индексам).
     * В зависимости от типа элемента хранимого в списке, возможно ограничения на добавление элемента в список.
     * Классы, реализующие интерфейс {@code CustomList} должны указывать в своей документации типы и ограничения.
     * @param index позиция для вставки.
     * @param element элемент, который должен быть вставлен.
     * @throws IndexOutOfBoundsException если позиция вне диапазона {@code (index < 0 || index > size)}.
     */
    void add (int index, E element);

    /**
     * Возвращает элемент в указанной позиции в этом списке.
     * @param index позиция возвращаемого элемента
     * @return элемент в указанной позиции в этом списке
     * @throws IndexOutOfBoundsException если позиция вне диапазона {@code (index >= size || index < 0)}.
     */
    E get(int index);

    /**
     * Заменяет элемент в указанной позиции в списке передаваемым элементом.
     * @param index позиция замещаемого элемента.
     * @param element элемент, который будет сохранен в казанную позицию.
     * @return элемент, ранее находившийся в указанном положении.
     * @throws IndexOutOfBoundsException если позиция вне диапазона {@code (index >= size || index < 0)}.
     */
    E set(int index, E element);

    /**
     * Удаляет элемент в списке из указанной позиции.
     * @param index позиция удаляемого элемента.
     * @return элемент, который был удален из списка.
     * @throws IndexOutOfBoundsException если позиция вне диапазона {@code (index >= size || index < 0)}.
     */
    E remove(int index);

    /**
     * Возвращает количество элементов в этом списке.
     * @return количество элементов в этом списке.
     */
    int size();

    /**
     * Удаляет все элементы из этого списка.
     * Список будет пустым.
     */
    void clear();

}
